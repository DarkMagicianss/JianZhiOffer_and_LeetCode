时间限制：1秒 空间限制：32768K 热度指数：172120
 算法知识视频讲解
题目描述
请设计一个函数，用来判断在一个矩阵中是否存在一条包含某字符串所有字符的路径。
路径可以从矩阵中的任意一个格子开始，每一步可以在矩阵中向左，向右，向上，向下移动一个格子。
如果一条路径经过了矩阵中的某一个格子，则之后不能再次进入这个格子。
例如 a b c e s f c s a d e e 这样的3 X 4 矩阵中包含一条字符串"bcced"的路径，但是矩阵中不包含"abcb"路径，
因为字符串的第一个字符b占据了矩阵中的第一行第二个格子之后，路径不能再次进入该格子。


自己写的bfs方法
    private class Point {
        private int x;
        private int y;
        private int index;

        Point(int x, int y, int index) {
            this.x = x;
            this.y = y;
            this.index = index;
        }
    }

    public boolean hasPath(char[] matrix, int rows, int cols, char[] str) {
        if (str == null || str.length == 0) return true;
        if(matrix.length == 1 && str.length == 1 && matrix[0] == str[0])return true;
        int[] dx = new int[]{-1, 1, 0, 0};//分别对应上下左右
        int[] dy = new int[]{0, 0, -1, 1};//分别对应上下左右
        char[][] test = new char[rows][cols];
        ArrayList<Point> start_list = new ArrayList<>();
        int matrix_index = 0;
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                test[i][j] = matrix[matrix_index++];
                if (test[i][j] == str[0]) {
                    start_list.add(new Point(i, j, 0));
                }
            }
        }
        for (Point p : start_list) {
            boolean[][] dp = new boolean[rows][cols];
            LinkedList<Point> queue = new LinkedList<>();
            queue.push(p);
            while (!queue.isEmpty()) {
                Point temp = queue.pop();
                dp[temp.x][temp.y] = true;
                for (int i = 0; i < 4; i++) {
                    int next_x = temp.x + dx[i];
                    int next_y = temp.y + dy[i];
                    if (next_x < 0 || next_x >= rows || next_y < 0 || next_y >= cols) continue;
                    if (test[next_x][next_y] == str[temp.index + 1] && dp[next_x][next_y] == false) {
                        if(temp.index + 1 == str.length - 1)return true;
                        queue.push(new Point(next_x, next_y, temp.index + 1));
                    }
                }
            }
        }
        return false;
    }
