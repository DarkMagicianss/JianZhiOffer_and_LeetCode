LeetCode200
给定一个由 '1'（陆地）和 '0'（水）组成的的二维网格，计算岛屿的数量。一个岛被水包围，并且它是通过水平方向或垂直方向上相邻的陆地连接而成的。你可以假设网格的四个边均被水包围。

示例 1:

输入:
11110
11010
11000
00000

输出: 1
示例 2:

输入:
11000
11000
00100
00011

输出: 3

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/number-of-islands
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

//第一次使用并差集的思路解决问题
    //使用并查集的思路做的
    public class Point {
        public Point father = null;

        Point(Point father) {
            this.father = father;
        }
    }

    public int numIslands(char[][] grid) {
        if (grid == null || grid.length == 0) return 0;
        if (grid.length == 1 && grid[0].length == 1) return grid[0][0] == '1' ? 1 : 0;
        int row = grid.length;
        int col = grid[0].length;
        int result = 0;
        Point[][] points = new Point[row][col];
        if (grid[0][0] == '1') {
            points[0][0] = new Point(null);
            result++;
        }
        for (int i = 1; i < row; i++) {
            if (grid[i][0] == '1') {
                if (points[i - 1][0] == null) result++;
                points[i][0] = new Point(points[i - 1][0]);
            }
        }
        for (int j = 1; j < col; j++) {
            if (grid[0][j] == '1') {
                if (points[0][j - 1] == null) result++;
                points[0][j] = new Point(points[0][j - 1]);
            }
        }
        for (int i = 1; i < row; i++) {
            for (int j = 1; j < col; j++) {
                if (grid[i][j] == '1') {
                    Point father = null;
                    if (grid[i - 1][j] == '0' && grid[i][j - 1] == '0') {
                        result++;
                    } else if (grid[i - 1][j] == '0' && grid[i][j - 1] == '1') {
                        father = points[i][j - 1];
                    } else if (grid[i - 1][j] == '1' && grid[i][j - 1] == '0') {
                        father = points[i - 1][j];
                    } else {//当上和左均为1的时候 就需要将两者连起来 result--
                        Point top_father = points[i - 1][j];
                        while (top_father.father != null) {
                            top_father = top_father.father;
                        }
                        Point left_father = points[i][j - 1];
                        while (left_father.father != null) {
                            left_father = left_father.father;
                        }
                        if (top_father != left_father) {
                            result--;
                            left_father.father = top_father;
                        }
                        father = top_father;
                    }
                    points[i][j] = new Point(father);
                }
            }
        }
        return result;
    }