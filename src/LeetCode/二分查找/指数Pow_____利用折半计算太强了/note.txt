LeetCode50
实现 pow(x, n) ，即计算 x 的 n 次幂函数。

示例 1:

输入: 2.00000, 10
输出: 1024.00000
示例 2:

输入: 2.10000, 3
输出: 9.26100
示例 3:

输入: 2.00000, -2
输出: 0.25000
解释: 2-2 = 1/22 = 1/4 = 0.25
说明:

-100.0 < x < 100.0
n 是 32 位有符号整数，其数值范围是 [−231, 231 − 1] 。

麻烦的复杂算法加优化
    public double myPow(double x, int n) {
        if (n == 0) return 1;
        if (n == 1) return x;
        if (x < 1.00000000001 && x > 0.9999999999999) return 1.0;
        if (x > -1.00000000001 && x < -0.9999999999999){
            if(n%2 == 0)return 1.0;
            else return -1.0;
        }
        int fuflag = 0;
        if (n < 0) {
            fuflag = 1;
            n = n == Integer.MIN_VALUE ? Integer.MAX_VALUE : -n;
        }
        if(n > Integer.MAX_VALUE/10){
            if((x < 1.0 && x > -1.0) || (fuflag == 1 && (x < -1.0 || x > 1.0)))return 0.0;
        }
        double result = 1.0;
        for (int i = 0; i < n; i++) {
            result *= x;
        }
        if (fuflag == 1) return 1.0 / result;
        else return result;
    }