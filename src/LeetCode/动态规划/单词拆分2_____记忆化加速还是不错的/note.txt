LeetCode140
给定一个非空字符串 s 和一个包含非空单词列表的字典 wordDict，在字符串中增加空格来构建一个句子，使得句子中所有的单词都在词典中。返回所有这些可能的句子。

说明：

分隔时可以重复使用字典中的单词。
你可以假设字典中没有重复的单词。
示例 1：

输入:
s = "catsanddog"
wordDict = ["cat", "cats", "and", "sand", "dog"]
输出:
[
  "cats and dog",
  "cat sand dog"
]
示例 2：

输入:
s = "pineapplepenapple"
wordDict = ["apple", "pen", "applepen", "pine", "pineapple"]
输出:
[
  "pine apple pen apple",
  "pineapple pen apple",
  "pine applepen apple"
]
解释: 注意你可以重复使用字典中的单词。
示例 3：

输入:
s = "catsandog"
wordDict = ["cats", "dog", "sand", "and", "cat"]
输出:
[]

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/word-break-ii
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

    //真是傻叉啊 先判断该单词拆分能否成功 再进行遍历促成拆分结果 总觉得很傻叉。。。
    public List<String> wordBreak(String s, List<String> wordDict) {
        List<String> result = new ArrayList<>();
        if (s == null || s.length() == 0) return result;
        //听说是一个完全背包问题 即物品可以无限拿
        boolean[] dp = new boolean[s.length() + 1];//表示[0,i-1]是否能由wordDict完全组成
        dp[0] = true;
        for (int i = 1; i <= s.length(); i++) {
            for (int j = 0; j < wordDict.size(); j++) {
                String temp = wordDict.get(j);
                if (i >= temp.length() && temp.equals(s.substring(i - temp.length(), i))) {
                    dp[i] = dp[i - temp.length()];
                    if (dp[i] == true) break;
                }
            }
        }
        if (dp[s.length()]) {
            StringBuilder sb = new StringBuilder();
            sub_wordBreak(s, wordDict, result, sb);
            return result;
        }else{
            return result;
        }
    }

    public void sub_wordBreak(String s, List<String> wordDict, List<String> result, StringBuilder sb) {
        if (s.length() == 0) {
            result.add(sb.toString().substring(0, sb.length() - 1));
            return;
        }
        for (int i = 0; i < wordDict.size(); i++) {
            if (s.startsWith(wordDict.get(i))) {
                String temp = wordDict.get(i);
                sb.append(temp).append(" ");
                sub_wordBreak(s.substring(temp.length()), wordDict, result, sb);
                sb.delete(sb.length() - temp.length() - 1, sb.length());
            }
        }
    }

