LeetCode87
给定一个字符串 s1，我们可以把它递归地分割成两个非空子字符串，从而将其表示为二叉树。

下图是字符串 s1 = "great" 的一种可能的表示形式。

    great
   /    \
  gr    eat
 / \    /  \
g   r  e   at
           / \
          a   t
在扰乱这个字符串的过程中，我们可以挑选任何一个非叶节点，然后交换它的两个子节点。

例如，如果我们挑选非叶节点 "gr" ，交换它的两个子节点，将会产生扰乱字符串 "rgeat" 。

    rgeat
   /    \
  rg    eat
 / \    /  \
r   g  e   at
           / \
          a   t
我们将 "rgeat” 称作 "great" 的一个扰乱字符串。

同样地，如果我们继续将其节点 "eat" 和 "at" 进行交换，将会产生另一个新的扰乱字符串 "rgtae" 。

    rgtae
   /    \
  rg    tae
 / \    /  \
r   g  ta  e
       / \
      t   a
我们将 "rgtae” 称作 "great" 的一个扰乱字符串。

给出两个长度相等的字符串 s1 和 s2，判断 s2 是否是 s1 的扰乱字符串。

示例 1:

输入: s1 = "great", s2 = "rgeat"
输出: true
示例 2:

输入: s1 = "abcde", s2 = "caebd"
输出: false

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/scramble-string
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

//大佬
        if (s1.equals(s2)) return true;
        int[] record = new int[26];
        for (int i = 0; i < s1.length(); i++) {
            record[s1.charAt(i) - 'a']++;
        }
        for (int i = 0; i < s2.length(); i++) {
            record[s2.charAt(i) - 'a']--;
        }
        for (int i = 0; i < 26; i++) {
            if (record[i] != 0)
                return false;
        }
        for (int i = 1; i < s1.length(); i++) {
            //大佬只从题目原意出发 二叉树 只分为两个子问题 递归解决 太强了
            if (isScramble(s1.substring(0, i), s2.substring(0, i)) &&
                    isScramble(s1.substring(i), s2.substring(i)) ||
                    isScramble(s1.substring(0, i), s2.substring(s2.length() - i)) &&
                            isScramble(s1.substring(i), s2.substring(0, s2.length() - i))) {
                return true;
            }
        }
        return false;
//是暴力 但不是美学
    public boolean isScramble(String s1, String s2) {
        if(s1.equals(s2))return true;
        return sub_isScramble(s1, 0, s1.length() - 1, s2, 0, s2.length() - 1);
    }

    public boolean sub_isScramble(String s1, int start1, int end1, String s2, int start2, int end2) {
        if (!myContains(s1, start1, end1, s2, start2, end2)) return false;
        if (end1 - start1 < 3 && end2 - start2 < 3) return true;
        if(s1.charAt(start1) == s2.charAt(start2) && sub_isScramble(s1, start1+1, end1, s2, start2+1, end2))
            return true;
        for (int i = start1; i < end1; i++) {
            for (int j = i + 1; j <= end1; j++) {
                if (sub_isScramble(s1, start1, i, s2, start2 + j - i, start2 + j - start1) &&
                        sub_isScramble(s1, i + 1, j, s2, start2, start2 + j - (i + 1)) &&
                        sub_isScramble(s1, j + 1, end1, s2, start2 + j - start1 + 1, end2))
                    return true;
            }
        }
        return false;
    }

    public boolean myContains(String s1, int start1, int end1, String s2, int start2, int end2) {
        //两者字符串片段中的字符是否匹配判断
        if (end1 == start1 && end2 == start2) return s1.charAt(start1) == s2.charAt(start2);
        HashMap<Character, Integer> map = new HashMap<>();
        for (int i = start1; i <= end1; i++) {
            int count = map.getOrDefault(s1.charAt(i), 0);
            map.put(s1.charAt(i), count + 1);
        }
        for (int i = start2; i <= end2; i++) {
            int count = map.getOrDefault(s2.charAt(i), 0);
            if (count == 0) return false;
            else map.put(s2.charAt(i), count - 1);
        }
        return true;
    }