LeetCode10
给定一个字符串 (s) 和一个字符模式 (p)。实现支持 '.' 和 '*' 的正则表达式匹配。

'.' 匹配任意单个字符。
'*' 匹配零个或多个前面的元素。
匹配应该覆盖整个字符串 (s) ，而不是部分字符串。

说明:

s 可能为空，且只包含从 a-z 的小写字母。
p 可能为空，且只包含从 a-z 的小写字母，以及字符 . 和 *。
示例 1:

输入:
s = "aa"
p = "a"
输出: false
解释: "a" 无法匹配 "aa" 整个字符串。
示例 2:

输入:
s = "aa"
p = "a*"
输出: true
解释: '*' 代表可匹配零个或多个前面的元素, 即可以匹配 'a' 。因此, 重复 'a' 一次, 字符串可变为 "aa"。
示例 3:

输入:
s = "ab"
p = ".*"
输出: true
解释: ".*" 表示可匹配零个或多个('*')任意字符('.')。
示例 4:

输入:
s = "aab"
p = "c*a*b"
输出: true
解释: 'c' 可以不被重复, 'a' 可以被重复一次。因此可以匹配字符串 "aab"。
示例 5:

输入:
s = "mississippi"
p = "mis*is*p*."
输出: false

时间复杂度很高啊！！！虽然仅仅靠判断和递归能解决问题！！！
    public boolean isMatch(String s, String p) {
        if (s == p) return true;
        char[] str = s.toCharArray();
        char[] pat = p.toCharArray();
        return sub_isMatch(str, 0, pat, 0);
    }

    public boolean sub_isMatch(char[] str, int s_index, char[] pat, int p_index) {
        //两个字符串匹配完所有字符 一起超出数组范围
        if (s_index == str.length && p_index == pat.length)
            return true;
        //字符串未超出范围 而匹配模式已经超出范围 则返回false ！！！
        // 反之由于存在a和ab*的问题可能不能直接返回false 因此后续的s_index前面需要加上范围判断
        if (s_index != str.length && p_index == pat.length)
            return false;
        if (p_index + 1 < pat.length && pat[p_index + 1] == '*') {
            if (s_index < str.length && (str[s_index] == pat[p_index] || pat[p_index] == '.')) {//后一个为'*' 并且目前两个字符已经匹配了
                return sub_isMatch(str, s_index, pat, p_index + 2) || //*代表前一个字符为0个
                        sub_isMatch(str, s_index + 1, pat, p_index + 2) || //*代表前一个字符为1个
                        sub_isMatch(str, s_index + 1, pat, p_index); //*代表前一个字符为n个
            } else {//如果目前的这个字符并没有匹配 那么只有在'*'代表个数为0的情况下才能匹配
                return sub_isMatch(str, s_index, pat, p_index + 2);//*代表前一个字符为0个
            }
        }
        if (s_index < str.length && (str[s_index] == pat[p_index] || pat[p_index] == '.')) {
            return sub_isMatch(str, s_index + 1, pat, p_index + 1); //匹配下一个字符
        } else {//如果对应位置不匹配
            return false;
        }
    }