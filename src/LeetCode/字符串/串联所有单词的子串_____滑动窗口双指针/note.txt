LeetCode30
给定一个字符串 s 和一些长度相同的单词 words。找出 s 中恰好可以由 words 中所有单词串联形成的子串的起始位置。

注意子串要与 words 中的单词完全匹配，中间不能有其他字符，但不需要考虑 words 中单词串联的顺序。



示例 1：

输入：
  s = "barfoothefoobarman",
  words = ["foo","bar"]
输出：[0,9]
解释：
从索引 0 和 9 开始的子串分别是 "barfoo" 和 "foobar" 。
输出的顺序不重要, [9,0] 也是有效答案。
示例 2：

输入：
  s = "wordgoodgoodgoodbestword",
  words = ["word","good","best","word"]
输出：[]



//我的方法是从String的每一个字符都判断后续的subString是否是目标子串 存在重复判断浪费了时间
    List<Integer> result = new ArrayList<>();
    public List<Integer> findSubstring(String s, String[] words) {
        int word_len = words.length;
        if (s.length() == 0 || word_len == 0) return result;
        int single_len = words[0].length();
        int all_len = word_len * single_len;
        if (s.length() < all_len) return result;

        HashMap<String, Integer> map = new HashMap<>();
        for (int i = 0; i < word_len; i++) {
            if (map.containsKey(words[i])) {//若出现重复则用负数表示
                map.put(words[i], map.get(words[i]) - 1);
            } else
                map.put(words[i], 0);
        }
        for (int i = 0; i <= s.length() - all_len; i++) {//剩余长度不足words长度结束
            sub_check(s, i, single_len, 0, word_len, map);
        }
        return result;
    }

    private void sub_check(String s, int s_index, int single_len, int count, int target, HashMap<String, Integer> map) {
        if (count == target) {//检测到所有子串
            result.add(s_index - count * single_len);
            return;
        }
        String single_str = s.substring(s_index, s_index + single_len);
        if (map.containsKey(single_str)) {
            //System.out.println(single_str + "    " + map.get(single_str) + "     " + count);
            if (map.get(single_str) <= 0) {
                map.put(single_str, map.get(single_str) + 1);
                sub_check(s, s_index + single_len, single_len, count + 1, target, map);
                map.put(single_str, map.get(single_str) - 1);
            } else {
                return;
            }
        }
    }