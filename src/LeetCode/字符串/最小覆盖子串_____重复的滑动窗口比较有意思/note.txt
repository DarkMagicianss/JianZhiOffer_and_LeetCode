LeetCode76
给你一个字符串 S、一个字符串 T，请在字符串 S 里面找出：包含 T 所有字母的最小子串。

示例：

输入: S = "ADOBECODEBANC", T = "ABC"
输出: "BANC"
说明：

如果 S 中不存这样的子串，则返回空字符串 ""。
如果 S 中存在这样的子串，我们保证它是唯一的答案。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/minimum-window-substring
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

还要考虑重复字母的问题。。。。。
        //滑动窗口的思路 还是比较麻烦而且速度较慢
        if (t.length() == 0 || s.length() == 0) return "";
        if (s.equals(t)) return s;
        HashMap<Character, Integer> map = new HashMap<>();
        for (int i = 0; i < t.length(); i++) {
            char temp = t.charAt(i);
            int count = map.getOrDefault(temp, 0);
            map.put(temp, count + 1);
        }
        int tar_len = map.size();
        int left = 0;
        int right = 0;
        int[] ans = new int[]{-1, 0, 0};
        int temp_count = 0;
        HashMap<Character, Integer> window = new HashMap<>();
        while (right < s.length()){
            char temp_char = s.charAt(right);
            int count = window.getOrDefault(temp_char,0);
            window.put(temp_char,count + 1);
            if(map.containsKey(temp_char) && map.get(temp_char).intValue() == window.get(temp_char).intValue()){
                temp_count++;
            }
            while( left <= right && temp_count == tar_len){
                char temp = s.charAt(left);
                if(right - left + 1  < ans[0] || ans[0] == -1) {
                    ans[0] = right - left + 1;
                    ans[1] = left;
                    ans[2] = right;
                }
                window.put(temp,window.get(temp) - 1);
                if(map.containsKey(temp) && window.get(temp).intValue() < map.get(temp).intValue()){
                    temp_count--;
                }
                left++;
            }
            right++;
        }
        return ans[0] == -1 ? "" : s.substring(ans[1], ans[2] + 1);
