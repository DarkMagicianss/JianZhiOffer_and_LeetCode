LeetCode17
给定一个仅包含数字 2-9 的字符串，返回所有它能表示的字母组合。

给出数字到字母的映射如下（与9宫格 电话按键相同）。注意 1 不对应任何字母。


示例:
2-abc
3-def
4-ghi
5-jkl
6-mno
7-pqrs
8-tuv
9-wxyz

输入："23"
输出：["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"].
说明:
尽管上面的答案是按字典序排列的，但是你可以任意选择答案输出的顺序。

比较暴力的思路。。。
就是排列组合喽
循环的次数就是输入字符串的长度
        String[][] list = new String[8][];
        list[0] = new String[]{"a", "b", "c"};
        list[1] = new String[]{"d", "e", "f"};
        list[2] = new String[]{"g", "h", "i"};
        list[3] = new String[]{"j", "k", "l"};
        list[4] = new String[]{"m", "n", "o"};
        list[5] = new String[]{"p", "q", "r", "s"};
        list[6] = new String[]{"t", "u", "v"};
        list[7] = new String[]{"w", "x", "y", "z"};
        int length = digits.length();
        String[] digits_strs = digits.split("");
        int[] digits_nums = new int[length];
        for (int i = 0; i < length; i++) {
            digits_nums[i] = Integer.parseInt(digits_strs[i]) - 2;
        }
        ArrayList<String> result = new ArrayList<String>();
        if(digits.length() == 0)return  result;
        for (int i = 0; i < list[digits_nums[0]].length; i++) {
            result.add(list[digits_nums[0]][i]);
        }
        for (int i = 1; i < length; i++) {
            //System.out.println("num:"+digits_nums[i]);
            int last_result_size = result.size();
            while(last_result_size > 0){
                String base_str = result.remove(0);
                //System.out.println("base_str:"+base_str);
                for (int k = 0; k < list[digits_nums[i]].length; k++) {
                    result.add(base_str + list[digits_nums[i]][k]);
                }
                last_result_size--;
            }
        }
        return result;