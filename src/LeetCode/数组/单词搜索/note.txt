LeetCode79
给定一个二维网格和一个单词，找出该单词是否存在于网格中。

单词必须按照字母顺序，通过相邻的单元格内的字母构成，其中“相邻”单元格是那些水平相邻或垂直相邻的单元格。同一个单元格内的字母不允许被重复使用。

示例:

board =
[
  ['A','B','C','E'],
  ['S','F','C','S'],
  ['A','D','E','E']
]

给定 word = "ABCCED", 返回 true.
给定 word = "SEE", 返回 true.
给定 word = "ABCB", 返回 false.

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/word-search
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
    public boolean exist(char[][] board, String word) {
        if (board.length == 0 || board[0].length == 0) return false;
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                if (sub_exist(board, i, j, word, 0)) return true;
            }
        }
        return false;
    }

    public boolean sub_exist(char[][] board, int i, int j, String word, int index) {
        if (index == word.length()) return true;
        //一种较为麻烦的dfs 同样是dfs加回溯 看起来就很麻烦
        char temp = board[i][j];
        int[] dx = new int[]{-1, 0, 1, 0};
        int[] dy = new int[]{0, 1, 0, -1};
        //System.out.println(index+"   "+i+"    "+j);
        for (int k = 0; k < 4; k++) {//遍历四个方向
            int temp_i = i + dx[k];
            int temp_j = j + dy[k];
            if (temp_i >= 0 && temp_i < board.length && temp_j >= 0 && temp_j < board[0].length &&
                    board[temp_i][temp_j] == word.charAt(index)) {
                board[i][j] = '*';//用*表示已经进行了查找
                if (sub_exist(board, temp_i, temp_j, word, index + 1))
                    return true;
            }
        }
        board[i][j] = temp;
        return false;
    }