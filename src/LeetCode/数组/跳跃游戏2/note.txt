LeetCode45
给定一个非负整数数组，你最初位于数组的第一个位置。

数组中的每个元素代表你在该位置可以跳跃的最大长度。

你的目标是使用最少的跳跃次数到达数组的最后一个位置。

示例:

输入: [2,3,1,1,4]
输出: 2
解释: 跳到最后一个位置的最小跳跃数是 2。
     从下标为 0 跳到下标为 1 的位置，跳 1 步，然后跳 3 步到达数组的最后一个位置。
说明:

假设你总是可以到达数组的最后一个位置。

//4ms 去掉LinkedList速度提升这么多？？？
    public int jump(int[] nums) {
        //不使用LinkedList 速度提升一倍？？？一脸闷逼？？？
        int len = nums.length;
        if (nums.length <= 1) return 0;
        int[] dp = new int[nums.length];
        int max_index = 0;
        for (int i = 0; i < len; i++) {
            if (i + nums[i] <= max_index) {//index加step小于之前的操作 则进行下一个判断
                continue;
            }
            if (i + nums[i] >= nums.length - 1) return (dp[i] + 1);
            for (int j = i + nums[i]; j > max_index; j--) {
                if (j < nums.length) {
                    dp[j] = dp[i] + 1;
                }
            }
            //更新最大index
            max_index = i + nums[i];
        }
        return 0;
    }

//14ms速度较慢
    public class Point {
        public int index;
        public int step;

        public Point(int index, int step) {
            this.index = index;
            this.step = step;
        }
    }
    public int jump(int[] nums) {
        LinkedList<Point> queue = new LinkedList<>();
        queue.add(new Point(0, 0));
        int max_index = 0;
        while (!queue.isEmpty()) {
            Point point = queue.poll();
            int range = nums[point.index];
            if(point.index + range <= max_index){//index加step小于之前的操作 则进行下一个判断
                continue;
            }
            System.out.println(point.index + "  " + nums[point.index]+"    "+max_index);
            for (int i = point.index + range; i > max_index; i--) {
                if (i == nums.length - 1) return (point.step + 1);
                if (i < nums.length) {
                    queue.add(new Point(i, point.step + 1));
                }
            }
            //更新最大index
            max_index = point.index + range;
        }
        return 0;
    }