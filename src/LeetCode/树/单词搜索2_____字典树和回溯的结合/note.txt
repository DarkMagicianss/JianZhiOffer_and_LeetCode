LeetCode212
给定一个二维网格 board 和一个字典中的单词列表 words，找出所有同时在二维网格和字典中出现的单词。

单词必须按照字母顺序，通过相邻的单元格内的字母构成，其中“相邻”单元格是那些水平相邻或垂直相邻的单元格。同一个单元格内的字母在一个单词中不允许被重复使用。

示例:

输入:
words = ["oath","pea","eat","rain"] and board =
[
  ['o','a','a','n'],
  ['e','t','a','e'],
  ['i','h','k','r'],
  ['i','f','l','v']
]

输出: ["eat","oath"]
说明:
你可以假设所有输入都由小写字母 a-z 组成。

提示:

你需要优化回溯算法以通过更大数据量的测试。你能否早点停止回溯？
如果当前单词不存在于所有单词的前缀中，则可以立即停止回溯。什么样的数据结构可以有效地执行这样的操作？散列表是否可行？为什么？ 前缀树如何？如果你想学习如何实现一个基本的前缀树，请先查看这个问题： 实现Trie（前缀树）。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/word-search-ii
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

    //这里的回溯算法会导致超时 需要进行优化
    public List<String> findWords(char[][] board, String[] words) {
        HashSet<String> result = new HashSet<>();
        if (words == null || words.length == 0) return new ArrayList<>(result);
        int row = board.length;
        int col = board[0].length;
        boolean[][] flag = new boolean[row][col];
        for (int i = 0; i < row; i++) {
            for (int j = 0; j < col; j++) {
                for (int k = 0; k < words.length; k++) {
                    if (sub_findWords(i, j, board, words[k], flag)) {
                        result.add(words[k]);
                    }
                }
            }
        }
        return new ArrayList<>(result);
    }

    private boolean sub_findWords(int i, int j, char[][] board, String word, boolean[][] flag) {
        if (word.equals("") || word.length() == 0) return true;
        if (i < 0 || j < 0 || i >= board.length || j >= board[0].length || flag[i][j] == true) return false;
        if (word.charAt(0) != board[i][j]) return false;
        flag[i][j] = true;
        boolean temp_result = sub_findWords(i + 1, j, board, word.substring(1), flag) ||
                sub_findWords(i - 1, j, board, word.substring(1), flag) ||
                sub_findWords(i, j + 1, board, word.substring(1), flag) ||
                sub_findWords(i, j - 1, board, word.substring(1), flag);
        flag[i][j] = false;
        return temp_result;
    }