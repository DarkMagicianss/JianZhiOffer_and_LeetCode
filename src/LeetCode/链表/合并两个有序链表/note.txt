LeetCode21
将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。

示例：

输入：1->2->4, 1->3->4
输出：1->1->2->3->4->4

//和之前的不一样 这次的节点使用的是源节点而不是新节点！！！
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        if (l1 == null) return l2;
        if (l2 == null) return l1;
        ListNode result = null;
        ListNode one = null;
        ListNode another = null;
        if (l1.val > l2.val) {//得出较小的数值的为other
            one = l2;
            another = l1;
        } else {
            one = l1;
            another = l2;
        }
        result = one;//记录头指针
        while (one != null && another != null) {
            if (one.next == null) {//若当前链已经达到最后
                one.next = another;
                return result;
            }else{
                ListNode r_next = one.next;
                if (r_next.val >= another.val) {//比较result的后一个节点
                    one.next = another;
                    another = another.next;//另一条链继续走一步
                    one = one.next;
                    one.next = r_next;
                } else {
                    one = one.next;
                }
            }
        }
        return result;
    }

没啥要说的 注意两个相同的数字需要都记录进去
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        if (l1 == null) return l2;
        if (l2 == null) return l1;
        ListNode index = new ListNode(Integer.MIN_VALUE);
        if (l1.val > l2.val) {
            index.val = l2.val;
            l2 = l2.next;
        } else {
            index.val = l1.val;
            l1 = l1.next;
        }
        ListNode result = index;
        ListNode list1 = l1, list2 = l2;
        int last_number = index.val;
        while (list1 != null || list2 != null) {
            //if (list1 != null) System.out.println("list1:" + list1.val);
            //if (list2 != null) System.out.println("list2:" + list2.val);
            if (list1 == null) {
                index.next = list2;
                return result;
            }
            if (list2 == null) {
                index.next = list1;
                return result;
            }
            if ((list1.val - last_number) > (list2.val - last_number)) {
                index.next = new ListNode(list2.val);
                list2 = list2.next;
            } else {
                index.next = new ListNode(list1.val);
                list1 = list1.next;
            }
            index = index.next;
            last_number = index.val;
        }
        return result;
    }