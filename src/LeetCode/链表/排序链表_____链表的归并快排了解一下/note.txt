LeetCode148
在 O(n log n) 时间复杂度和常数级空间复杂度下，对链表进行排序。

示例 1:

输入: 4->2->1->3
输出: 1->2->3->4
示例 2:

输入: -1->5->3->4->0
输出: -1->0->3->4->5

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/sort-list
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

//快排还是比较慢的 因为不够稳定最差时间复杂度达到n2 最好是n
    public ListNode sortList(ListNode head) {
        sub_sortList(head, null);
        return head;
    }

    public void sub_sortList(ListNode head, ListNode tail) {
        if (head == null || head == tail) return;
        int target_value = head.val;
        ListNode step = head.next;
        ListNode left = head;
        while (step != tail) {
            if (step.val < target_value) {
                left = left.next;
                //留在原来的left的肯定比target大 因此将大的交换到后面 小的放到left
                swap(left, step);
            }
            step = step.next;
        }
        //将比target小的最后一个数和一开始的head(target)交换
        //是的此时head前面的都比head小
        swap(left, head);
        sub_sortList(head, left);
        sub_sortList(left.next, tail);
    }

    public void swap(ListNode n1, ListNode n2) {
        int temp = n1.val;
        n1.val = n2.val;
        n2.val = temp;
    }